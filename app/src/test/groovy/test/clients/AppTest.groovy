/*
 * This Spock specification was generated by the Gradle 'init' task.
 */
package test.clients

import spock.lang.Specification

/**
 * Yields all the tests for the program
 *
 */
class AppTest extends Specification {

    def "criteria test - low, medium and high scores"(){
        given:
        ClientService service = new ClientService(
                1,
                1,
                2
        );
        List<ClientInfo> clientInfoList = new ArrayList<>();
        ClientInfo source = new ClientInfo();
        source.id = 1;
        source.firstName = sourceName
        source.lastName = sourceLastName
        source.email = sourceEmail
        source.address = sourceAddress

        ClientInfo test = new ClientInfo();
        test.id = 2;
        test.firstName = testName
        test.lastName = testLastName
        test.email = testEmail
        test.address = testAddress

        clientInfoList.add(source)
        clientInfoList.add(test)

        when:
        List<PotentialDuplicate> matches = service.searchPotentialDuplicates(clientInfoList)

        then:
        matches[0].accuracy == accuracy

        where:
        sourceName|sourceLastName|sourceEmail|sourceAddress|testName  |testLastName|testEmail  |testAddress   | accuracy
        // Perfect match
        'alex wan'|'li xhu'      |'alx@g.com'|'end st. 200'|'alex wan'|'li xhu'    |'alx@g.com'|'end st. 200' | 'High'
        // Disordered name
        'wan alex'|'li xhu'      |'alx@g.com'|'end st. 200'|'alex wan'|'li xhu'    |'alx@g.com'|'end st. 200' | 'High'
        // Disordered last name
        'wan alex'|'xhu li'      |'alx@g.com'|'end st. 200'|'alex wan'|'li xhu'    |'alx@g.com'|'end st. 200' | 'High'
        // At least one word of the name
        'wan'     |'li xhu'      |'alx@g.com'|'end st. 200'|'alex wan'|'li xhu'    |'alx@g.com'|'end st. 200' | 'High'
        // At least one word of the last name
        'wan alex'|'xhu'         |'alx@g.com'|'end st. 200'|'alex wan'|'li xhu'    |'alx@g.com'|'end st. 200' | 'High'
        // No coincidence with name
        'Luis'    |'xhu'         |'alx@g.com'|'end st. 200'|'alex wan'|'li xhu'    |'alx@g.com'|'end st. 200' | 'Medium'
        // No coincidence in the name or last name
        'Luis'    |'Suarez'      |'alx@g.com'|'end st. 200'|'alex wan'|'li xhu'    |'alx@g.com'|'end st. 200' | 'Medium'
        // Disordered physical address
        'alex wan'|'li xhu'      |'alx@g.com'|'st. end 200'|'alex wan'|'li xhu'    |'alx@g.com'|'end st. 200' | 'High'
        // Address with more words
        'alex wan'|'li xhu'      |'alx@g.com'|'end of the st. 200'|'alex wan'|'li xhu'|'alx@g.com'|'end st. 200'|'High'
        // No coincidence (less than 2 words) with the physical address
        'alex wan'|'li xhu'      |'alx@g.com'|'the blvd. 200'|'alex wan'|'li xhu' |'alx@g.com'|'end st. 200'|'Medium'
        // No coincidence in the name, last name and email
        'Luis'    |'xhu'         |'ls@g.com' |'end st. 200'|'alex wan'|'li xhu'    |'alx@g.com'|'end st. 200' | 'Low'
    }

    def "Two arrays word search functionality"(){
        given:
        ClientService service = new ClientService();
        String[] source = sourceArray;
        String[] test = testArray;
        int threshold = testThreshold;

        when:
        int occurrences = service.iterateForMatches(source, test, threshold);

        then:
        occurrences == testOccurrences

        where:
        sourceArray                             | testArray                              |testThreshold|testOccurrences
        new String[]{"A", "clever", "solution"} |new String[]{"A", "clever", "solution"} | 2           | 2
        new String[]{"A", "solution"}           |new String[]{"A", "clever", "solution"} | 2           | 2
        new String[]{"A"}                       |new String[]{"A", "clever", "solution"} | 1           | 1
        new String[]{"Hey"}                     |new String[]{"A", "clever", "solution"} | 10          | 0
        new String[]{"H", "o", "l", "a"}        |new String[]{"H","o","l","a"}           | 10          | 4
    }

    def "Score translation functionality"(){
        given:
        int score = testScore;
        ClientService service = new ClientService();

        when:
        String translated = service.translateScoreToAccuracy(score);

        then:
        translated == testString

        where:
        testScore | testString
        1         | Scores.LOW.get()
        2         | Scores.MEDIUM.get()
        3         | Scores.HIGH.get()

    }

    def "Service exception"(){
        given:
        ClientService service = new ClientService(
                1,
                1,
                2
        );
        List<ClientInfo> clientInfoList = new ArrayList<>();
        ClientInfo source = new ClientInfo();
        source.id = 1;
        source.firstName = 'Darwis'
        source.lastName = 'Narvaez'
        source.email = 'darwis@gmail.com'
        source.address = 'Argentina'

        clientInfoList.add(source)

        when:
        service.searchPotentialDuplicates(clientInfoList)

        then:
        thrown ClientServiceException
    }

}
